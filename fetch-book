#!/usr/bin/env node

const Database = require('better-sqlite3');
const glob = require('glob');
const axios = require('axios');

const fs = require('fs');
const path = require('path');

let database;

const setupDatabase = (databasePath) => {
  database = new Database(databasePath);

  database.exec(`CREATE TABLE IF NOT EXISTS bookProviders(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    apiUrl TEXT NOT NULL,
    pageUrl TEXT NOT NULL,
    referer TEXT NOT NULL
  )`);
  database.exec(`CREATE TABLE IF NOT EXISTS books(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    apiId INTEGER NOT NULL,
    providerId INTEGER NOT NULL,
    title TEXT NOT NULL,
    pages TEXT NOT NULL,
    FOREIGN KEY (providerId) REFERENCES bookProviders(id)
  )`);
};

const updateDatabase = async (providerPath) => {
  const addBookProvider = (provider) => database
    .prepare(`INSERT OR REPLACE INTO
      bookProviders(id, name, apiUrl, pageUrl, referer)
      VALUES ((SELECT id FROM bookProviders WHERE apiUrl = :apiUrl),
        :name, :apiUrl, :pageUrl, :referer)`)
    .run(provider);

  const providerFiles = await glob.glob(`${providerPath}/*.js`);
  for (const providerFile of providerFiles) {
    const provider = require(providerFile);
    const providerId = addBookProvider(provider).lastInsertRowid;

    const addBook = (apiId, title, pages) => database
      .prepare(`INSERT OR REPLACE INTO
        books(id, apiId, providerId, title, pages)
        VALUES ((SELECT id FROM books
          WHERE apiId = :apiId AND providerId = :providerId),
          :apiId, :providerId, :title, :pages)`)
      .run({ apiId, providerId, title: title.trim(), pages: pages.join(';') });

    await provider.fetch(addBook);
  }
};

const downloadBook = async (bookId, outputDir) => {
  const book = database.prepare("SELECT * FROM books WHERE id = ?").get(bookId);
  if (!book) {
    return;
  }

  const provider = database.prepare("SELECT * FROM bookProviders WHERE id = ?")
    .get(book.providerId);

  const output = book.title
    .normalize('NFD')
    .replace(/Đ/g, 'D').replace(/đ/g, 'd') // distinct letter
    .replace(/[^\d\w\s-_]/g, '')
    .toLowerCase().replace(/(\s|-|_)+/g, '-');
  outputDir = path.join(outputDir, output);
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const pages = book.pages.split(';');
  const padLength = pages.length.toString().length;

  for (const [index, page] of pages.entries()) {
    const pageImage = await axios.get(
      `${provider.pageUrl}/${page}`,
      { responseType: 'stream', headers: { Referer: provider.referer } },
    );

    const pageNum = `${index + 1}`.padStart(padLength, '0');
    const pageFile = `${output}-${pageNum}${path.extname(page)}`;
    pageImage.data.pipe(fs.createWriteStream(path.join(outputDir, pageFile)));
  }
};

setupDatabase('books.db');

const bookId = process.argv[2];
if (bookId) {
  downloadBook(process.argv[2], "output/");
} else {
  updateDatabase(`${__dirname}/providers`);
}
